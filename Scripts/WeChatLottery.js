/*
ÂæÆ‰ø°Â∞èÁ®ãÂ∫è"Ê¥ªÂä®ÊäΩÂ•ñ"Ëá™Âä®Á≠æÂà∞ÔºåÊîØÊåÅ Quantumult XÔºàÁêÜËÆ∫‰∏ä‰πüÊîØÊåÅ SurgeÔºåÊú™Â∞ùËØïÔºâ„ÄÇ
ËØ∑ÂÖàÊåâ‰∏ãËø∞ÊñπÊ≥ïËøõË°åÈÖçÁΩÆÔºåËøõÂÖ•"Ê¥ªÂä®ÊäΩÂ•ñ"ÔºåÊâãÂä®Á≠æÂà∞‰∏ÄÊ¨°ÊàñÁÇπÂáª"Â∑≤Á≠æÂà∞"ÔºåËã•ÂºπÂá∫"È¶ñÊ¨°ÂÜôÂÖ•Ê¥ªÂä®ÊäΩÂ•ñ Token ÊàêÂäü"Âç≥ÂèØÊ≠£Â∏∏È£üÁî®ÔºåÂÖ∂‰ªñÊèêÁ§∫ÊàñÊó†ÊèêÁ§∫ËØ∑ÂèëÈÄÅÊó•Âøó‰ø°ÊÅØËá≥ issue„ÄÇ
Âà∞ cron ËÆæÂÆöÊó∂Èó¥Ëá™Âä®Á≠æÂà∞Êó∂ÔºåËã•ÂºπÂá∫"Ê¥ªÂä®ÊäΩÂ•ñ - Á≠æÂà∞ÊàêÂäü"Âç≥ÂÆåÊàêÁ≠æÂà∞ÔºåÂÖ∂‰ªñÊèêÁ§∫ÊàñÊó†ÊèêÁ§∫ËØ∑ÂèëÈÄÅÊó•Âøó‰ø°ÊÅØËá≥ issue„ÄÇ
Ê≥®ÊÑè‚ö†Ô∏èÔºöÊ≠§ËÑöÊú¨Áî®‰∫éÂú® 2020.03.19 Âèä‰πãÂêéÈúÄËé∑ÂèñËøá token ÁöÑÁî®Êà∑Ôºå‰∏îÈúÄË¶ÅÊõ¥Êç¢ rewrite Âèä hostname„ÄÇ
Ê≥®ÊÑè‚ö†Ô∏èÔºöÈùûÊâãÂä®ÂÆåÊàêÁ≠æÂà∞„ÄÅÊäΩÂ•ñ„ÄÅÂÆåÊàê‰ªªÂä°ÔºåËØ∑Ëá™Ë°åËØÑ‰º∞Â∞ÅÂè∑Âç±Èô©ÔºåÊ≠§ËÑöÊú¨‰ªÖÁî®‰∫éÂ≠¶‰π†‰∫§ÊµÅÔºåÂØπÂÖ∂‰Ωô‰∫ã‰ª∂Ê¶Ç‰∏çË¥üË¥£„ÄÇ
‚ö†Ô∏èÂÖçË¥£Â£∞ÊòéÔºö
1. Ê≠§ËÑöÊú¨‰ªÖÁî®‰∫éÂ≠¶‰π†Á†îÁ©∂Ôºå‰∏ç‰øùËØÅÂÖ∂ÂêàÊ≥ïÊÄß„ÄÅÂáÜÁ°ÆÊÄß„ÄÅÊúâÊïàÊÄßÔºåËØ∑Ê†πÊçÆÊÉÖÂÜµËá™Ë°åÂà§Êñ≠ÔºåÊú¨‰∫∫ÂØπÊ≠§‰∏çÊâøÊãÖ‰ªª‰Ωï‰øùËØÅË¥£‰ªª„ÄÇ
2. Áî±‰∫éÊ≠§ËÑöÊú¨‰ªÖÁî®‰∫éÂ≠¶‰π†Á†îÁ©∂ÔºåÊÇ®ÂøÖÈ°ªÂú®‰∏ãËΩΩÂêé 24 Â∞èÊó∂ÂÜÖÂ∞ÜÊâÄÊúâÂÜÖÂÆπ‰ªéÊÇ®ÁöÑËÆ°ÁÆóÊú∫ÊàñÊâãÊú∫Êàñ‰ªª‰ΩïÂ≠òÂÇ®ËÆæÂ§á‰∏≠ÂÆåÂÖ®Âà†Èô§ÔºåËã•ËøùÂèçËßÑÂÆöÂºïËµ∑‰ªª‰Ωï‰∫ã‰ª∂Êú¨‰∫∫ÂØπÊ≠§Âùá‰∏çË¥üË¥£„ÄÇ
3. ËØ∑ÂãøÂ∞ÜÊ≠§ËÑöÊú¨Áî®‰∫é‰ªª‰ΩïÂïÜ‰∏öÊàñÈùûÊ≥ïÁõÆÁöÑÔºåËã•ËøùÂèçËßÑÂÆöËØ∑Ëá™Ë°åÂØπÊ≠§Ë¥üË¥£„ÄÇ
4. Ê≠§ËÑöÊú¨Ê∂âÂèäÂ∫îÁî®‰∏éÊú¨‰∫∫Êó†ÂÖ≥ÔºåÊú¨‰∫∫ÂØπÂõ†Ê≠§ÂºïËµ∑ÁöÑ‰ªª‰ΩïÈöêÁßÅÊ≥ÑÊºèÊàñÂÖ∂‰ªñÂêéÊûú‰∏çÊâøÊãÖ‰ªª‰ΩïË¥£‰ªª„ÄÇ
5. Êú¨‰∫∫ÂØπ‰ªª‰ΩïËÑöÊú¨ÂºïÂèëÁöÑÈóÆÈ¢òÊ¶Ç‰∏çË¥üË¥£ÔºåÂåÖÊã¨‰ΩÜ‰∏çÈôê‰∫éÁî±ËÑöÊú¨ÈîôËØØÂºïËµ∑ÁöÑ‰ªª‰ΩïÊçüÂ§±ÂíåÊçüÂÆ≥„ÄÇ
6. Â¶ÇÊûú‰ªª‰ΩïÂçï‰ΩçÊàñ‰∏™‰∫∫ËÆ§‰∏∫Ê≠§ËÑöÊú¨ÂèØËÉΩÊ∂âÂ´å‰æµÁäØÂÖ∂ÊùÉÂà©ÔºåÂ∫îÂèäÊó∂ÈÄöÁü•Âπ∂Êèê‰æõË∫´‰ªΩËØÅÊòéÔºåÊâÄÊúâÊùÉËØÅÊòéÔºåÊàë‰ª¨Â∞ÜÂú®Êî∂Âà∞ËÆ§ËØÅÊñá‰ª∂Á°ÆËÆ§ÂêéÂà†Èô§Ê≠§ËÑöÊú¨„ÄÇ
7. ÊâÄÊúâÁõ¥Êé•ÊàñÈó¥Êé•‰ΩøÁî®„ÄÅÊü•ÁúãÊ≠§ËÑöÊú¨ÁöÑ‰∫∫ÂùáÂ∫îËØ•‰ªîÁªÜÈòÖËØªÊ≠§Â£∞Êòé„ÄÇÊú¨‰∫∫‰øùÁïôÈöèÊó∂Êõ¥ÊîπÊàñË°•ÂÖÖÊ≠§Â£∞ÊòéÁöÑÊùÉÂà©„ÄÇ‰∏ÄÊó¶ÊÇ®‰ΩøÁî®ÊàñÂ§çÂà∂‰∫ÜÊ≠§ËÑöÊú¨ÔºåÂç≥ËßÜ‰∏∫ÊÇ®Â∑≤Êé•ÂèóÊ≠§ÂÖçË¥£Â£∞Êòé„ÄÇ
Author: zZPiglet
----------
Êõ¥Êñ∞Êó•ÂøóÔºö
- 2020/03/28Ôºö
Êõ¥Êñ∞Êé•Âè£ v1 -> v2ÔºåËã•ÊúâÈóÆÈ¢òËØ∑ÂÖàËá™Ë°åÂõûÊªöÂπ∂Êèê‰∫§Êó•Âøó / ÊäìÂåÖËá≥ issue„ÄÇ
‰øÆÊîπÈÉ®ÂàÜÁªÜËäÇ„ÄÇ
- 2020/03/26Ôºö
‰øÆÂ§çÊó•ÂøóÊòæÁ§∫ÔºåÊñ∞Â¢ûËé∑ÂèñÊâÄÊúâ‰ªªÂä°Â•ñÂä±ÔºåÂèÇ‰∏éÂπ∏ËøêÂ§ßÁ§ºÔºåÈÉ®ÂàÜËá™Âä®ÂºÄÂ•ñÔºàÁìúÂàÜÁé∞ÈáëÁ∫¢ÂåÖ„ÄÅÂêÑÁ±ªÊó†Áî®‰ºòÊÉ†Âà∏Ôºâ„ÄÇ
Áî±‰∫éÂºÄÂ•ñÈÉ®ÂàÜÊØèÁ±ªÊé•Âè£‰∏çÁªü‰∏ÄÔºåËã•Âá∫Áé∞ÈùûÁìúÂàÜÁé∞ÈáëÁ∫¢ÂåÖ„ÄÅ‰ºòÊÉ†Âà∏Á±ªÁöÑ‰∏≠Â•ñÔºåÂèØÊäìÂåÖÂºÄÂ•ñËøáÁ®ãÂèçÈ¶àËá≥ issueÔºåÂêéÁª≠ËøõË°åÊõ¥Êñ∞Ë°•ÂÖÖ„ÄÇ
ËøáÁ®ãÔºöËøõÂæÆ‰ø°Â∞èÁ®ãÂ∫è -> ÊâìÂºÄ ThorÔºàÊàñÂèØÂØºÂÖ• Thor Êü•ÁúãËÆ∞ÂΩïÁöÑÊäìÂåÖËΩØ‰ª∂Ôºâ-> ‰ΩøÁî®ÈªòËÆ§ÁöÑÂÖ®Â±ÄÊäìÂåÖ -> ÁÇπÂ∞èÁ®ãÂ∫èÈáåÁöÑ"ÊàëÁöÑ-‰∏≠Â•ñÁ∫™ÂΩï-‰∏≠Â•ñÁöÑÊù°ÁõÆ-ÂºÄÂ•ñ" -> ÂÖ≥ Thor -> ÂØºÂá∫Ê≠§Ê¨°ÊäìÂåÖÊâÄÊúâËÆ∞ÂΩïÔºàÊàñËá™Ë°åÊéíÈô§ÊïèÊÑü‰ø°ÊÅØÂêéÁöÑËÆ∞ÂΩïÔºâ -> Êèê‰∫§issue
Â∑≤Áü• bugÔºö‰∏≠Â•ñÂæóÂà∏‰∏çÈÄöÁü•ÔºåÊöÇÊú™ÊâæÂà∞ÈîôËØØÁÇπÔºåÂ§ß‰Ω¨ÂèØÂ∏ÆÂøôÊåáÊ≠£„ÄÇÂÖ≥ÈîÆÂèÇÊï∞Ôºödatainfo.couponCnt
- 2020/03/23Ôºö
Êñ∞Â¢ûËá™Âä®ÂèÇ‰∏éÈ¶ñÈ°µÊäΩÂ•ñ„ÄÅËøõË°åÂèÇ‰∏é 3 ‰∏™È¶ñÈ°µÊäΩÂ•ñÂêéÁöÑÈöèÂç≥ÂÖëÊç¢„ÄÅÈ¢ÜÂèñÂèÇ‰∏é 5 ‰∏™È¶ñÈ°µÊäΩÂ•ñÂêéÁöÑÊØèÊó•‰ªªÂä°Â•ñÂä±„ÄÇ
----------
ÂíïÂíïÂíïÔºö
ÂÖ∂‰ΩôÂºÄÂ•ñ
Ëß¶ÂèëÂàÜ‰∫´ÂæóÂπ∏ËøêÂ∏ÅÔºàÈöèÁºòÁ¢∞Âà∞ÔºåÂøò‰∫ÜÊäìÂåÖ„ÄÇÊúâÂì™‰ΩçÂ∞è‰ºô‰º¥Á¢∞Âà∞‰∫ÜÂèØ‰ª•Â∏ÆÂøôÊäì‰∏™ÂåÖÂèçÈ¶àËá≥ issue„ÄÇÔºâ
ËÆæÁΩÆÂª∂Ëøü
Â§öË¥¶Âè∑
Quantumult X (TestFlight 190+, App Store 1.0.5+):
[task_local]
1 0 * * * WeChatLottery_new.js
or remote
1 0 * * * https://raw.githubusercontent.com/zZPiglet/Task/master/WeChatLottery/WeChatLottery_new.js
[rewrite_local]
^https:\/\/api-hdcj\.9w9\.com\/v2\/sign url script-request-header WeChatLottery_new.js
or remote
^https:\/\/api-hdcj\.9w9\.com\/v2\/sign url script-request-header https://raw.githubusercontent.com/zZPiglet/Task/master/WeChatLottery/WeChatLottery_new.js
Surge 4.0+:
[Script]
cron "1 0 * * *" script-path=https://raw.githubusercontent.com/zZPiglet/Task/master/WeChatLottery/WeChatLottery_new.js
http-request ^https:\/\/api-hdcj\.9w9\.com\/v2\/sign script-path=https://raw.githubusercontent.com/zZPiglet/Task/master/WeChatLottery/WeChatLottery_new.js
All app:
[mitm]
hostname = api-hdcj.9w9.com
Ëé∑ÂèñÂÆå Token ÂêéÂèØ‰∏çÊ≥®Èáä rewrite / mitmÔºåToken Êõ¥Êñ∞Êó∂‰ºöÂºπÁ™ó„ÄÇËã•Âõ† mitm ÂØºËá¥ËØ•Â∞èÁ®ãÂ∫èÁΩëÁªú‰∏çÁ®≥ÂÆöÔºåÂèØÊ≥®ÈáäÊéâ mtim„ÄÇ
*/


//ÂèÇÂä†Âπ∏ËøêÂ§ßÂ•ñÔºåÈªòËÆ§ÂÖ≥Èó≠ÔºåËã•ÈúÄ‰ΩøÁî®ËØ∑Êîπ‰∏∫ trueÔºàÂÖ≥Ê≥®"Ê¥ªÂä®ÊäΩÂ•ñ"ÂÖ¨‰ºóÂè∑ÔºåÂπ∂Âú®Â∞èÁ®ãÂ∫è‰∏≠ÊâãÂä®ÂèÇ‰∏é‰∏ÄÊ¨°Âç≥ÂèØËÆæÁΩÆËá™Âä®ÂèÇ‰∏éÔºåÂπ∂‰∏çÈúÄË¶Å‰ΩøÁî®ËÑöÊú¨Ôºâ
const luckgift = true //false

const CheckinURL = 'https://api-hdcj.9w9.com/v2/sign/sign'
const CheckindataURL = 'https://api-hdcj.9w9.com/v2/sign'
const DataURL = 'https://api-hdcj.9w9.com/v2/informations'
const IndexURL = 'https://api-hdcj.9w9.com/v2/index?type=0&gzh_number='
const LotteryURL = 'https://api-hdcj.9w9.com/v2/lotteries/'
const CouponURL = 'https://api-hdcj.9w9.com/v2/coupons/'
const ExchangeURL = 'https://api-hdcj.9w9.com/v2/limit_red_envelopes/453'
const GetTaskURL = 'https://api-hdcj.9w9.com/v2/task'
const TaskURL = 'https://api-hdcj.9w9.com/v2/tasks/'
const WinURL = 'https://api-hdcj.9w9.com/v2/users/list/2'
const LuckyGiftURL = 'https://api-hdcj.9w9.com/v2/lucky_gift'
const TokenName = 'Ê¥ªÂä®ÊäΩÂ•ñ'
const TokenKey = 'wclotterynew'
const UidKey = 'wcluid'
const datainfo = {}
const $cmp = compatibility()

async function Sign() {
    await Checkin()
    await Join()
    await Exchange()
    await Task()
    await Win()
    await GetData()
    await notify()
}

if ($cmp.isRequest) {
    GetToken()
    $cmp.done()
} else {
    Sign()
    $cmp.done()
}

function GetToken() {
    if ($request && $request.method == 'GET') {
        var TokenKeyValue = $request.headers['token']
        var UIDValue = $request.headers['uid']
        $cmp.write(UIDValue, UidKey)
        if ($cmp.read(TokenKey) != (undefined || null)) {
            if ($cmp.read(TokenKey) != TokenKeyValue) {
                var token = $cmp.write(TokenKeyValue, TokenKey)
                if (!token) {
                    $cmp.notify("Êõ¥Êñ∞" + TokenName + " Token Â§±Ë¥•‚ÄºÔ∏è", "", "")
                } else {
                    $cmp.notify("Êõ¥Êñ∞" + TokenName + " Token ÊàêÂäü üéâ", "", "")
                }
            }
        } else {
            var token = $cmp.write(TokenKeyValue, TokenKey);
            if (!token) {
                $cmp.notify("È¶ñÊ¨°ÂÜôÂÖ•" + TokenName + " Token Â§±Ë¥•‚ÄºÔ∏è", "", "")
            } else {
                $cmp.notify("È¶ñÊ¨°ÂÜôÂÖ•" + TokenName + " Token ÊàêÂäü üéâ", "", "")
            }
        }
    } else {
        $cmp.notify("ÂÜôÂÖ•" + TokenName + "Token Â§±Ë¥•‚ÄºÔ∏è", "", "ÈÖçÁΩÆÈîôËØØ, Êó†Ê≥ïËØªÂèñËØ∑Ê±ÇÂ§¥, ")
    }
}

function Checkin() {
    return new Promise(resolve => {
        const LotteryCheckin = {
            url: CheckinURL,
            headers: {
                "token": $cmp.read('wclotterynew'),
                "uid" : $cmp.read('wcluid'),
            }
        }
        $cmp.get(LotteryCheckin, function(error, response, data) {
            try{
                if (error) {
                    datainfo.error = 1
                    datainfo.errormessage = error
                } else {
                    datainfo.checkin = JSON.parse(data)
                    let LotteryCheckindata = {
                        url: CheckindataURL,
                        headers: {
                            "token": $cmp.read('wclotterynew'),
                            "uid" : $cmp.read('wcluid'),
                        }
                    }
                    $cmp.get(LotteryCheckindata, function(error, response, data) {
                        try{
                            const checkindata = JSON.parse(data)
                            let day = checkindata.data.cycle
                            datainfo.luckcoin = checkindata.data.sign_lucky[day - 1]
                            resolve('done')
                        } catch (e) {
                            $cmp.notify("Ê¥ªÂä®ÊäΩÂ•ñÁ≠æÂà∞ÁªìÊûú"+e.name+"‚ÄºÔ∏è", JSON.stringify(e), e.message)
                            resolve('done')
                        }
                    })
                }
                resolve('done')
            } catch (e) {
                $cmp.notify("Ê¥ªÂä®ÊäΩÂ•ñ"+e.name+"‚ÄºÔ∏è", JSON.stringify(e), e.message)
                resolve('done')
            }
        })
    })
}

function Join() {
    return new Promise(resolve => {
        const commonheaders = {
            "token": $cmp.read('wclotterynew'),
            "uid" : $cmp.read('wcluid'),
        }
        const LotteryIndex = {
            url: IndexURL,
            headers: commonheaders
        }
        $cmp.get(LotteryIndex, function(error, response, data) {
            try{
                const index = JSON.parse(data)
                let list = index.data.mr_data
                datainfo.joinCnt = 0
                datainfo.skipedCnt = 0
                datainfo.failCnt = 0
                for (var l of list) {
                    if (l.join_status == true) {
                        datainfo.skipedCnt += 1
                    } else {
                        const LotteryJoin = {
                            url: LotteryURL + l.id + '/join',
                            headers:  commonheaders,
                            body: { "template": "" }
                        }
                        $cmp.post(LotteryJoin, function (error, response, data) {
                            try{
                                const joindata = JSON.parse(data)
                                if (joindata.success == true) {
                                    datainfo.joinCnt += 1
                                } else {
                                    datainfo.failCnt += 1
                                    $cmp.log('\n' + l.sponsor_name + 'Ôºö' + joindata.message.error)
                                }
                                resolve('done')
                            } catch (e) {
                                $cmp.notify("Ê¥ªÂä®ÊäΩÂ•ñÂèÇ‰∏é\"${l.sponsor_name}\"ÊäΩÂ•ñ"+e.name+"‚ÄºÔ∏è", JSON.stringify(e), e.message)
                                resolve('done')
                            }
                        })
                    }
                }
                resolve('done')
            } catch (e) {
                $cmp.notify("Ê¥ªÂä®ÊäΩÂ•ñËé∑ÂèñÊäΩÂ•ñÂàóË°®"+e.name+"‚ÄºÔ∏è", JSON.stringify(e), e.message)
                resolve('done')
            }
        })
        if (luckgift) {
            const LotteryLuckGift = {
                url: LuckyGiftURL,
                headers: commonheaders
            }
            $cmp.get(LotteryLuckGift, function(error, response, data) {
                try{
                    const luckgiftindex = JSON.parse(data)
                    let lglist = luckgiftindex.data.hb_data
                    for (var lgl of lglist) {
                        if (lgl.join_status == 0) {
                            datainfo.skipedCnt += 1
                        } else {
                            const LotteryJoin = {
                                url: LotteryURL + lgl.id + '/join',
                                headers:  commonheaders,
                                body: { "template": "" }
                            }
                            $cmp.post(LotteryJoin, function (error, response, data) {
                                try{
                                    const joindata = JSON.parse(data)
                                    if (joindata.success == true) {
                                        datainfo.joinCnt += 1
                                    } else {
                                        datainfo.failCnt += 1
                                        $cmp.log('\n' + lgl.sponsor_name + 'Ôºö' + joindata.message.error)
                                    }
                                    resolve('done')
                                } catch (e) {
                                    $cmp.notify("Ê¥ªÂä®ÊäΩÂ•ñÂèÇ‰∏é\"${lgl.sponsor_name}\"ÊäΩÂ•ñ"+e.name+"‚ÄºÔ∏è", JSON.stringify(e), e.message)
                                    resolve('done')
                                }
                            })
                        }
                    }
                    resolve('done')
                } catch (e) {
                    $cmp.notify("Ê¥ªÂä®ÊäΩÂ•ñËé∑ÂèñÊäΩÂ•ñÂàóË°®"+e.name+"‚ÄºÔ∏è", JSON.stringify(e), e.message)
                    resolve('done')
                }
            })
        }
    })
}

function Exchange() {
    return new Promise(resolve => {
        const LotteryExchange = {
            url: ExchangeURL,
            headers: {
                "token": $cmp.read('wclotterynew'),
                "uid" : $cmp.read('wcluid'),
            }
        }
        $cmp.post(LotteryExchange, function(error, response, data) {
            try{
                if (error) {
                    datainfo.exchangeerror = 1
                    datainfo.exchangeerrormessage = error
                } else {
                    datainfo.exchange = JSON.parse(data)
                }
                resolve('done')
            } catch (e) {
                $cmp.notify("Ê¥ªÂä®ÊäΩÂ•ñÂÖëÊç¢ÁªìÊûú"+e.name+"‚ÄºÔ∏è", JSON.stringify(e), e.message)
                resolve('done')
            }
        })
    })
}

function Task() {
    return new Promise(resolve => {
        const commonheaders = {
            "token": $cmp.read('wclotterynew'),
            "uid" : $cmp.read('wcluid'),
        }
        const LotteryGetTask = {
            url: GetTaskURL,
            headers: commonheaders
        }
        $cmp.get(LotteryGetTask, function(error, response, data) {
            try{
                const gettask = JSON.parse(data)
                datainfo.taskcoin = 0
                datainfo.taskCnt = 0
                datainfo.taskfailCnt = 0
                let newlist = gettask.data.task_new.list
                let daylist = gettask.data.task_day.list
                let weeklist = gettask.data.task_week.list
                for (var newl of newlist) {
                    const LotteryTask = {
                        url: TaskURL + newl.id,
                        headers:  commonheaders
                    }
                    $cmp.post(LotteryTask, function (error, response, data) {
                        try{
                            const task = JSON.parse(data)
                            if (task.success == true && task.data) {
                                datainfo.taskCnt += 1
                                datainfo.taskcoin += Number(task.data.lucky_count)
                            } else if (task.success == false) {
                                datainfo.taskfailCnt += 1
                                $cmp.log('\n' + newl.name + 'Ôºö' + task.message.error)
                            }
                            resolve('done')
                        } catch (e) {
                            $cmp.notify("Ê¥ªÂä®ÊäΩÂ•ñ\"${newl.name}\"‰ªªÂä°"+e.name+"‚ÄºÔ∏è", JSON.stringify(e), e.message)
                            resolve('done')
                        }
                    })
                }
                for (var dayl of daylist) {
                    const LotteryTask = {
                        url: TaskURL + dayl.id,
                        headers:  commonheaders
                    }
                    $cmp.post(LotteryTask, function (error, response, data) {
                        try{
                            const task = JSON.parse(data)
                            if (task.success == true && task.data) {
                                datainfo.taskCnt += 1
                                datainfo.taskcoin += Number(task.data.lucky_count)
                            } else if (task.success == false) {
                                datainfo.taskfailCnt += 1
                                $cmp.log('\n' + dayl.name + 'Ôºö' + task.message.error)
                            }
                            resolve('done')
                        } catch (e) {
                            $cmp.notify("Ê¥ªÂä®ÊäΩÂ•ñ\"${dayl.name}\"‰ªªÂä°"+e.name+"‚ÄºÔ∏è", JSON.stringify(e), e.message)
                            resolve('done')
                        }
                    })
                }
                for (var weekl of weeklist) {
                    const LotteryTask = {
                        url: TaskURL + weekl.id,
                        headers:  commonheaders
                    }
                    $cmp.post(LotteryTask, function (error, response, data) {
                        try{
                            const task = JSON.parse(data)
                            if (task.success == true && task.data) {
                                datainfo.taskCnt += 1
                                datainfo.taskcoin += Number(task.data.lucky_count)
                            } else if (task.success == false) {
                                datainfo.taskfailCnt += 1
                                $cmp.log('\n' + weekl.name + 'Ôºö' + task.message.error)
                            }
                            resolve('done')
                        } catch (e) {
                            $cmp.notify("Ê¥ªÂä®ÊäΩÂ•ñ\"${weekl.name}\"‰ªªÂä°"+e.name+"‚ÄºÔ∏è", JSON.stringify(e), e.message)
                            resolve('done')
                        }
                    })
                }
                resolve('done')
            } catch (e) {
                $cmp.notify("Ê¥ªÂä®ÊäΩÂ•ñ‰ªªÂä°ÂàóË°®"+e.name+"‚ÄºÔ∏è", JSON.stringify(e), e.message)
                resolve('done')
            }
        })
    })
}

function Win() {
    return new Promise(resolve => {
        const commonheaders = {
            "token": $cmp.read('wclotterynew'),
            "uid" : $cmp.read('wcluid'),
        }
        const LotteryWin = {
            url: WinURL,
            headers: commonheaders
        }
        $cmp.get(LotteryWin, function(error, response, data) {
            try{
                const win = JSON.parse(data)
                datainfo.winCnt = 0
                datainfo.winmoney = 0
                datainfo.couponCnt = 0
                let winlist = win.data.data
                for (var winl of winlist) {
                    if (winl.sponsor_name == 'Ê¥ªÂä®ÊäΩÂ•ñÁ¶èÂà©Âêõ') {
                        const LotteryWin = {
                            url: LotteryURL + winl.id + '/split',
                            headers:  commonheaders
                        }
                        $cmp.post(LotteryWin, function (error, response, data) {
                            try{
                                const winmoney = JSON.parse(data)
                                if (winmoney.success == true) {
                                    datainfo.winCnt += 1
                                    datainfo.winmoney += Number(winmoney.data.money)
                                }
                                resolve('done')
                            } catch (e) {
                                $cmp.notify("Ê¥ªÂä®ÊäΩÂ•ñ\"${winl.sponsor_name}\"ÂºÄÂ•ñ"+e.name+"‚ÄºÔ∏è", JSON.stringify(e), e.message)
                                resolve('done')
                            }
                        })
                    } else if (winl.sponsor_name == 'Ê¥ªÂä®ÊäΩÂ•ñ') {
                        // to do
                    } else {
                        const LotteryInfo = {
                            url: LotteryURL + winl.id + '?qrcode_id=',
                            headers: commonheaders
                        }
                        $cmp.get(LotteryInfo, function (error, response, data) {
                            const linfo = JSON.parse(data)
                            const LotteryWin = {
                                url: CouponURL + linfo.data.bags_info.id,
                                headers:  commonheaders
                            }
                            $cmp.post(LotteryWin, function (error, response, data) {
                                try{
                                    const wincoupon = JSON.parse(data)
                                    if (wincoupon.success == true && wincoupon.data.data.mark == true) {
                                        datainfo.winCnt += 1
                                        datainfo.couponCnt += 1
                                    }
                                    resolve('done')
                                } catch (e) {
                                    $cmp.notify("Ê¥ªÂä®ÊäΩÂ•ñ\"${winl.sponsor_name}\"ÂºÄÂ•ñ"+e.name+"‚ÄºÔ∏è", JSON.stringify(e), e.message)
                                    resolve('done')
                                }
                            })
                        })
                    }
                }
                resolve('done')
            } catch (e) {
                $cmp.notify("Ê¥ªÂä®ÊäΩÂ•ñ‰ªªÂä°ÂàóË°®"+e.name+"‚ÄºÔ∏è", JSON.stringify(e), e.message)
                resolve('done')
            }
        })
    })
}

function GetData() {
    return new Promise(resolve => {
        let LotteryData = {
            url: DataURL,
            headers: {
                "token": $cmp.read('wclotterynew'),
            }
        }
        $cmp.get(LotteryData, function (error, response, data) {
            try {
                const obj = JSON.parse(data)
                datainfo.allluckcoin = obj.data.user_info.lucky_count;
                datainfo.luckmoney = obj.data.user_info.money;
                resolve ('done')
            } catch (e) {
                $cmp.notify("Ê¥ªÂä®ÊäΩÂ•ñÁªìÊûú"+e.name+"‚ÄºÔ∏è", JSON.stringify(e), e.message)
                resolve('done')
            }
        })
    })

}

function notify() {
    return new Promise(resolve => {
        try {
            let Title = 'Ê¥ªÂä®ÊäΩÂ•ñ - '
            let subTitle = ''
            let detail = ''
            let coupon = ''
            let em = ''
            if (datainfo.error == 1) {
                $cmp.log("wclcheckin failed response: \n" + datainfo.errormessage)
                Title += 'Á≠æÂà∞Êé•Âè£ËØ∑Ê±ÇÂ§±Ë¥•Ô∏è'
                em += '\nÁ≠æÂà∞Êé•Âè£ËØ∑Ê±ÇÂ§±Ë¥•,ËØ¶ÊÉÖËØ∑ÁúãÊó•Âøó„ÄÇ'
            } else if (datainfo.checkin) {
                if (datainfo.checkin.success == true) {
                    Title += 'Á≠æÂà∞ÊàêÂäüÔºÅüéâ'
                    detail += 'Á≠æÂà∞Ëé∑Âæó ' + datainfo.luckcoin + ' Â∏ÅÔºå'
                } else if (datainfo.checkin.message.code == 1) {
                    Title += 'ÈáçÂ§çÁ≠æÂà∞ÔºÅüòä'
                } else if (datainfo.checkin.message.error == 'token expired') {
                    Title += 'Token Â§±Êïà‚ùóÔ∏è'
                    em += '\nÁ≠æÂà∞ Token Â§±ÊïàÔºåËØ∑ÈáçÊñ∞Ëé∑Âèñ„ÄÇ'
                } else if (datainfo.checkin.message.error == 'token missing') {
                    Title += 'Êú™Ëé∑Âèñ Token‚ö†Ô∏èÔ∏è'
                    em += '\nËØ∑ÂÖàËé∑Âèñ Token„ÄÇ'
                } else {
                    $cmp.log("wclcheckin failed response: \n" + JSON.stringify(datainfo.checkin))
                    Title += 'Á≠æÂà∞Â§±Ë¥•‚ÄºÔ∏è'
                    em += '\nÁ≠æÂà∞Â§±Ë¥•Ôºö' + datainfo.checkin.message.error + 'ÔºåËØ¶ÊÉÖËØ∑ÁúãÊó•Âøó„ÄÇ'
                }
            }
            if (datainfo.taskCnt > 0) {
                subTitle += '‰ªªÂä° ' + datainfo.taskCnt + ' ‰∏™ '
                detail += '‰ªªÂä°Ëé∑Âæó ' + datainfo.taskcoin + ' Â∏ÅÔºå'
            }
            if (datainfo.taskfailCnt > 0) {
                em += '\n‰ªªÂä°Â§±Ë¥•ÂÖ±' + datainfo.taskfailCnt + ' ‰∏™ÔºåËØ¶ÊÉÖËØ∑ÁúãÊó•Âøó„ÄÇ'
            }
            if (datainfo.exchangeerror == 1) {
                $cmp.log("wclcheckin failed response: \n", datainfo.exchangeerrormessage)
                subTitle += 'ÂÖëÊç¢Â§±Ë¥• '
                em += '\nÂÖëÊç¢Êé•Âè£ËØ∑Ê±ÇÂ§±Ë¥•ÔºåËØ¶ÊÉÖËØ∑ÁúãÊó•Âøó„ÄÇ'
            } else if (datainfo.exchange) {
                if (datainfo.exchange.success == true) {
                    subTitle += 'ÂÖëÊç¢ÊàêÂäü '
                    detail += 'Ëä±Ë¥π 20 Â∏ÅÂÖëÊç¢Ëé∑Âæó ' + datainfo.exchange.data.money + ' ÂÖÉÔºå'
                } else if (datainfo.exchange.message.code == 1) {
                    subTitle += 'ÂÖëÊç¢ÈáçÂ§ç '
                } else {
                    $cmp.log("wclexchange failed response: \n" + JSON.stringify(datainfo.checkin))
                    subTitle += 'ÂÖëÊç¢Â§±Ë¥• '
                    em += '\nÂÖëÊç¢Â§±Ë¥•Ôºö' + datainfo.checkin.message.error + 'ÔºåËØ¶ÊÉÖËØ∑ÁúãÊó•Âøó„ÄÇ'
                }
            }
            if (datainfo.winCnt > 0) {
                subTitle += '‰∏≠Â•ñ ' + datainfo.winCnt + ' ‰∏™ '
                if (datainfo.winmoney > 0) {
                    detail += '‰∏≠Â•ñËé∑Âæó ' + datainfo.winmoney.toFixed(2) + ' ÂÖÉÔºå'
                }
                if (datainfo.couponCnt > 0) {
                    coupon += '\n‰∏≠Â•ñËé∑Âæó ' + datainfo.couponCnt + ' Âº†Âà∏ÔºåËØ¶ÊÉÖËØ∑ËøõÂÖ•Â∞èÁ®ãÂ∫èÊü•ÁúãÔºàÂ§ßÊ¶ÇÁéáÊó†Áî®Ôºâ'
                }
            }
            detail += 'Ë¥¶Êà∑ÂÖ±Êúâ ' + datainfo.allluckcoin + " Â∏ÅÂèä " + datainfo.luckmoney + " ÂÖÉ„ÄÇüí∞"
            if (datainfo.joinCnt > 0) {
                subTitle += 'ÂèÇ‰∏éÊäΩÂ•ñ ' + datainfo.joinCnt + ' ‰∏™ '
            }
            if (datainfo.failCnt > 0 ) {
                em += '\nÊäΩÂ•ñÂ§±Ë¥•ÂÖ±' + datainfo.failCnt + ' ‰∏™ÔºåËØ¶ÊÉÖËØ∑ÁúãÊó•Âøó„ÄÇ'
            }
            if (datainfo.skipedCnt > 0) {
                detail += '\nË∑≥Ëøá ' + datainfo.skipedCnt +' ‰∏™Â∑≤ÂèÇ‰∏éÁöÑÊäΩÂ•ñ„ÄÇ'
            }
            $cmp.notify(Title, subTitle, detail + coupon + em)
            resolve('done')
        } catch (e) {
            $cmp.notify("ÈÄöÁü•Ê®°Âùó " + e.name + "‚ÄºÔ∏è", JSON.stringify(e), e.message)
            resolve('done')
        }
    })
}

function compatibility() {
    const isRequest = typeof $request != "undefined"
    const isSurge = typeof $httpClient != "undefined"
    const isQuanX = typeof $task != "undefined"
    const isJSBox = typeof $app != "undefined" && typeof $http != "undefined"
    const isNode = typeof require == "function" && !isJSBox;
    const node = (() => {
        if (isNode) {
            const request = require('request');
            return ({request})
        } else {
            return (null)
        }
    })()
    const notify = (title, subtitle, message) => {
        if (isQuanX) $notify(title, subtitle, message)
        if (isSurge) $notification.post(title, subtitle, message)
        if (isNode) log(title+subtitle+message)
        if (isJSBox) $push.schedule({title: title, body: subtitle?subtitle+"\n"+message:message})
    }
    const write = (value, key) => {
        if (isQuanX) return $prefs.setValueForKey(value, key)
        if (isSurge) return $persistentStore.write(value, key)
    }
    const read = (key) => {
        if (isQuanX) return $prefs.valueForKey(key)
        if (isSurge) return $persistentStore.read(key)
    }
    const adapterStatus = (response) => {
        if (response) {
            if (response.status) {
                response["statusCode"] = response.status
            } else if (response.statusCode) {
                response["status"] = response.statusCode
            }
        }
        return response
    }
    const get = (options, callback) => {
        if (isQuanX) {
            if (typeof options == "string") options = { url: options }
            options["method"] = "GET"
            $task.fetch(options).then(response => {
                callback(null, adapterStatus(response), response.body)
            }, reason => callback(reason.error, null, null))
        }
        if (isSurge) $httpClient.get(options, (error, response, body) => {
            callback(error, adapterStatus(response), body)
        })
        if (isNode) {
            node.request(options, (error, response, body) => {
                callback(error, adapterStatus(response), body)
            })
        }
        if (isJSBox) {
            if (typeof options == "string") options = {url: options}
            options["header"] = options["headers"]
            options["handler"] = function (resp) {
                let error = resp.error;
                if (error) error = JSON.stringify(resp.error)
                let body = resp.data;
                if (typeof body == "object") body = JSON.stringify(resp.data);
                callback(error, adapterStatus(resp.response), body)
            };
            $http.get(options);
        }
    }
    const post = (options, callback) => {
        if (isQuanX) {
            if (typeof options == "string") options = { url: options }
            options["method"] = "POST"
            $task.fetch(options).then(response => {
                callback(null, adapterStatus(response), response.body)
            }, reason => callback(reason.error, null, null))
        }
        if (isSurge) {
            $httpClient.post(options, (error, response, body) => {
                callback(error, adapterStatus(response), body)
            })
        }
        if (isNode) {
            node.request.post(options, (error, response, body) => {
                callback(error, adapterStatus(response), body)
            })
        }
        if (isJSBox) {
            if (typeof options == "string") options = {url: options}
            options["header"] = options["headers"]
            options["handler"] = function (resp) {
                let error = resp.error;
                if (error) error = JSON.stringify(resp.error)
                let body = resp.data;
                if (typeof body == "object") body = JSON.stringify(resp.data)
                callback(error, adapterStatus(resp.response), body)
            }
            $http.post(options);
        }
    }
    const log = (message) => console.log(message)
    const done = (value = {}) => {
        if (isQuanX) isRequest ? $done(value) : null
        if (isSurge) isRequest ? $done(value) : $done()
    }
    return { isQuanX, isSurge, isJSBox, isRequest, notify, write, read, get, post, log, done }
}
